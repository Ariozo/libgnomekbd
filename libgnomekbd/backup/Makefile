# Makefile.in generated by automake 1.9.6 from Makefile.am.
# libgnomekbd/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/libgnomekbd
pkglibdir = $(libdir)/libgnomekbd
pkgincludedir = $(includedir)/libgnomekbd
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
subdir = libgnomekbd
DIST_COMMON = $(gnomekbdinc_HEADERS) $(noinst_HEADERS) \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/intltool.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(gnomekbdincdir)"
libLTLIBRARIES_INSTALL = $(INSTALL)
LTLIBRARIES = $(lib_LTLIBRARIES)
libgnomekbd_la_LIBADD =
am_libgnomekbd_la_OBJECTS = libgnomekbd_la-gkb-keyboard-config.lo \
	libgnomekbd_la-gkb-desktop-config.lo \
	libgnomekbd_la-gkb-indicator-config.lo \
	libgnomekbd_la-gkb-util.lo libgnomekbd_la-gkb-indicator.lo \
	libgnomekbd_la-gkb-indicator-marshal.lo \
	libgnomekbd_la-gkb-indicator-plugin-manager.lo \
	libgnomekbd_la-gkb-config-registry.lo \
	libgnomekbd_la-gkb-keyboard-drawing-marshal.lo \
	libgnomekbd_la-gkb-keyboard-drawing.lo
libgnomekbd_la_OBJECTS = $(am_libgnomekbd_la_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libgnomekbd_la_SOURCES)
DIST_SOURCES = $(libgnomekbd_la_SOURCES)
gnomekbdincHEADERS_INSTALL = $(INSTALL_HEADER)
HEADERS = $(gnomekbdinc_HEADERS) $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/svu/CVS/libgnomekbd/missing --run aclocal-1.9
ALL_LINGUAS = ru
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/svu/CVS/libgnomekbd/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/svu/CVS/libgnomekbd/missing --run autoconf
AUTOHEADER = ${SHELL} /home/svu/CVS/libgnomekbd/missing --run autoheader
AUTOMAKE = ${SHELL} /home/svu/CVS/libgnomekbd/missing --run automake-1.9
AWK = gawk
CATALOGS =  ru.gmo
CATOBJEXT = .gmo
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DATADIRNAME = share
DBUS_CFLAGS = -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
DBUS_LIBS = -ldbus-glib-1 -ldbus-1 -lglib-2.0  
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = 
FFLAGS = 
GCONF_CFLAGS = -DORBIT2=1 -pthread -I/usr/include/gconf/2 -I/usr/include/orbit-2.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
GCONF_LIBS = -pthread -lgconf-2 -lORBit-2 -lm -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  
GETTEXT_PACKAGE = libgnomekbd
GMOFILES =  ru.gmo
GMSGFMT = /usr/bin/msgfmt
GREP = /bin/grep
GTK_CFLAGS = -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
GTK_LIBS = -lgtk-x11-2.0 -latk-1.0 -lgdk-x11-2.0 -lgdk_pixbuf-2.0 -lm -lpangocairo-1.0 -lfontconfig -lXext -lXrender -lXinerama -lXi -lXrandr -lXcursor -lXfixes -lpango-1.0 -lcairo -lgobject-2.0 -lgmodule-2.0 -ldl -lglib-2.0 -lX11  
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
INSTOBJEXT = .mo
INTLLIBS = 
INTLTOOL_CAVES_RULE = %.caves:     %.caves.in     $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_DESKTOP_RULE = %.desktop:   %.desktop.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_DIRECTORY_RULE = %.directory: %.directory.in $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_EXTRACT = $(top_builddir)/intltool-extract
INTLTOOL_ICONV = /usr/bin/iconv
INTLTOOL_KBD_RULE = %.kbd:       %.kbd.in       $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -x -u -m -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_KEYS_RULE = %.keys:      %.keys.in      $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -k -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_MERGE = $(top_builddir)/intltool-merge
INTLTOOL_MSGFMT = /usr/bin/msgfmt
INTLTOOL_MSGMERGE = /usr/bin/msgmerge
INTLTOOL_OAF_RULE = %.oaf:       %.oaf.in       $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -o -p $(top_srcdir)/po $< $@
INTLTOOL_PERL = /usr/bin/perl
INTLTOOL_PONG_RULE = %.pong:      %.pong.in      $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -x -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_PROP_RULE = %.prop:      %.prop.in      $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_SCHEMAS_RULE = %.schemas:   %.schemas.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -s -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_SERVER_RULE = %.server:    %.server.in    $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -o -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_SERVICE_RULE = %.service: %.service.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_SHEET_RULE = %.sheet:     %.sheet.in     $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -x -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_SOUNDLIST_RULE = %.soundlist: %.soundlist.in $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_THEME_RULE = %.theme:     %.theme.in     $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_UI_RULE = %.ui:        %.ui.in        $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -x -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_UPDATE = $(top_builddir)/intltool-update
INTLTOOL_XAM_RULE = %.xam:       %.xml.in       $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -x -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
INTLTOOL_XGETTEXT = /usr/bin/xgettext
INTLTOOL_XML_NOMERGE_RULE = %.xml:       %.xml.in       $(INTLTOOL_MERGE) ; LC_ALL=C $(INTLTOOL_MERGE) -x -u /tmp $< $@
INTLTOOL_XML_RULE = %.xml:       %.xml.in       $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -x -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
LDFLAGS = 
LIBGLADE_CFLAGS = -I/usr/include/libglade-2.0 -I/usr/include/gtk-2.0 -I/usr/include/libxml2 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
LIBGLADE_LIBS = -lglade-2.0 -lgtk-x11-2.0 -lxml2 -lgdk-x11-2.0 -latk-1.0 -lgdk_pixbuf-2.0 -lm -lpangocairo-1.0 -lfontconfig -lXext -lXrender -lXinerama -lXi -lXrandr -lXcursor -lXfixes -lpango-1.0 -lcairo -lX11 -lgobject-2.0 -lgmodule-2.0 -ldl -lglib-2.0  
LIBGNOMEUI_CFLAGS = -DORBIT2=1 -pthread -I/usr/include/libgnomeui-2.0 -I/usr/include/libgnome-2.0 -I/usr/include/libgnomecanvas-2.0 -I/usr/include/gtk-2.0 -I/usr/include/libart-2.0 -I/usr/include/gconf/2 -I/usr/include/libbonoboui-2.0 -I/usr/include/gnome-vfs-2.0 -I/usr/lib/gnome-vfs-2.0/include -I/usr/include/gnome-keyring-1 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/orbit-2.0 -I/usr/include/libbonobo-2.0 -I/usr/include/bonobo-activation-2.0 -I/usr/include/pango-1.0 -I/usr/include/freetype2 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/libxml2  
LIBGNOMEUI_LIBS = -pthread -lgnomeui-2 -lSM -lICE -lbonoboui-2 -lgnome-keyring -lxml2 -lgnomecanvas-2 -lgnome-2 -lpopt -lart_lgpl_2 -lpangoft2-1.0 -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgdk_pixbuf-2.0 -lpangocairo-1.0 -lfontconfig -lXext -lXrender -lXinerama -lXi -lXrandr -lXcursor -lXfixes -lpango-1.0 -lcairo -lX11 -lbonobo-2 -lgnomevfs-2 -lbonobo-activation -lgconf-2 -lgobject-2.0 -lORBit-2 -lm -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  
LIBGNOME_CFLAGS = -DORBIT2=1 -pthread -I/usr/include/libgnome-2.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/orbit-2.0 -I/usr/include/libbonobo-2.0 -I/usr/include/gconf/2 -I/usr/include/gnome-vfs-2.0 -I/usr/lib/gnome-vfs-2.0/include -I/usr/include/bonobo-activation-2.0  
LIBGNOME_LIBS = -pthread -lgnome-2 -lpopt -lbonobo-2 -lgnomevfs-2 -lbonobo-activation -lgconf-2 -lgobject-2.0 -lORBit-2 -lm -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBXKLAVIER_CFLAGS = -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/libxml2  
LIBXKLAVIER_LIBS = -lxklavier -lgobject-2.0 -lglib-2.0 -lxml2  
LN_S = ln -s
LTLIBOBJS = 
MAINT = 
MAINTAINER_MODE_FALSE = #
MAINTAINER_MODE_TRUE = 
MAKEINFO = ${SHELL} /home/svu/CVS/libgnomekbd/missing --run makeinfo
MKINSTALLDIRS = ./mkinstalldirs
MSGFMT = /usr/bin/msgfmt
OBJEXT = o
PACKAGE = libgnomekbd
PACKAGE_BUGREPORT = 
PACKAGE_NAME = libgnomekbd
PACKAGE_STRING = libgnomekbd 0.1
PACKAGE_TARNAME = libgnomekbd
PACKAGE_VERSION = 0.1
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
POFILES =  ru.po
POSUB = po
PO_IN_DATADIR_FALSE = 
PO_IN_DATADIR_TRUE = 
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
USE_NLS = yes
VERSION = 0.1
WARN_CFLAGS = -Wall -Wmissing-prototypes 
XGETTEXT = /usr/bin/xgettext
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/svu/CVS/libgnomekbd/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${prefix}/share/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
lib_LTLIBRARIES = libgnomekbd.la
libgnomekbd_la_CFLAGS = \
	-I$(top_srcdir) -Wall -Werror			\
	$(DBUS_CFLAGS)					\
	$(GTK_CFLAGS)					\
	$(GCONF_CFLAGS)					\
	$(LIBGNOME_CFLAGS)				\
	$(LIBXKLAVIER_CFLAGS)				\
	-I$(top_srcdir)/intl				\
	-DSYS_PLUGIN_DIR=\"$(libdir)/gnomekbd/\"	\
	-DG_LOG_DOMAIN=\"GnomeKbdIndicator\"		\
	-DGLADEDIR=\"$(gladedir)\"			\
	-DDATADIR=\"$(datadir)\"			\
	-DSYSCONFDIR=\"$(sysconfdir)\"			\
	-DLIBDIR=\"$(libdir)\"				

libgnomekbd_la_LDFLAGS = \
	$(GCONF_LIBS)

libgnomekbd_la_SOURCES = gkb-keyboard-config.c \
                         gkb-desktop-config.c \
                         gkb-indicator-config.c \
                         gkb-util.c \
                         gkb-indicator.c \
                         gkb-indicator-marshal.c \
                         gkb-indicator-plugin-manager.c \
                         gkb-config-registry.c \
                         gkb-keyboard-drawing-marshal.c \
                         gkb-keyboard-drawing.c

BUILT_SOURCES = gkb-indicator-marshal.c \
	gkb-indicator-marshal.h         \
        gkb-config-registry-server.h     \
        gkb-config-registry-client.h     \
        gkb-keyboard-drawing-marshal.c            \
        gkb-keyboard-drawing-marshal.h

CLEANFILES = \
	$(BUILT_SOURCES)

gnomekbdincdir = $(includedir)/libgnomekbd
gnomekbdinc_HEADERS = \
                      gkb-desktop-config.h \
                      gkb-keyboard-config.h \
                      gkb-config-registry-client.h \
                      gkb-config-registry.h \
                      gkb-indicator.h \
                      gkb-indicator-config.h \
                      gkb-indicator-plugin.h \
                      gkb-keyboard-drawing.h \
                      gkb-util.h

noinst_HEADERS = gkb-indicator-plugin-manager.h \
                 $(extra_nih) \
                 gkb-config-private.h \
                 gkb-config-registry-server.h

EXTRA_DIST = gkb-indicator-marshal.list \
             gkb-keyboard-drawing-marshal.list \
             gkb-config-registry.xml \
             $(glade_DATA)

GLIB_GENMARSHAL = $(shell pkg-config --variable=glib_genmarshal glib-2.0)
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  libgnomekbd/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  libgnomekbd/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(mkdir_p) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(libdir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(libdir)/$$f"; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@set -x; list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$p"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libgnomekbd.la: $(libgnomekbd_la_OBJECTS) $(libgnomekbd_la_DEPENDENCIES) 
	$(LINK) -rpath $(libdir) $(libgnomekbd_la_LDFLAGS) $(libgnomekbd_la_OBJECTS) $(libgnomekbd_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libgnomekbd_la-gkb-config-registry.Plo
include ./$(DEPDIR)/libgnomekbd_la-gkb-desktop-config.Plo
include ./$(DEPDIR)/libgnomekbd_la-gkb-indicator-config.Plo
include ./$(DEPDIR)/libgnomekbd_la-gkb-indicator-marshal.Plo
include ./$(DEPDIR)/libgnomekbd_la-gkb-indicator-plugin-manager.Plo
include ./$(DEPDIR)/libgnomekbd_la-gkb-indicator.Plo
include ./$(DEPDIR)/libgnomekbd_la-gkb-keyboard-config.Plo
include ./$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing-marshal.Plo
include ./$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing.Plo
include ./$(DEPDIR)/libgnomekbd_la-gkb-util.Plo

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

libgnomekbd_la-gkb-keyboard-config.lo: gkb-keyboard-config.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-keyboard-config.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-config.Tpo" -c -o libgnomekbd_la-gkb-keyboard-config.lo `test -f 'gkb-keyboard-config.c' || echo '$(srcdir)/'`gkb-keyboard-config.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-config.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-config.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-config.Tpo"; exit 1; fi
#	source='gkb-keyboard-config.c' object='libgnomekbd_la-gkb-keyboard-config.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-keyboard-config.lo `test -f 'gkb-keyboard-config.c' || echo '$(srcdir)/'`gkb-keyboard-config.c

libgnomekbd_la-gkb-desktop-config.lo: gkb-desktop-config.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-desktop-config.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-desktop-config.Tpo" -c -o libgnomekbd_la-gkb-desktop-config.lo `test -f 'gkb-desktop-config.c' || echo '$(srcdir)/'`gkb-desktop-config.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-desktop-config.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-desktop-config.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-desktop-config.Tpo"; exit 1; fi
#	source='gkb-desktop-config.c' object='libgnomekbd_la-gkb-desktop-config.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-desktop-config.lo `test -f 'gkb-desktop-config.c' || echo '$(srcdir)/'`gkb-desktop-config.c

libgnomekbd_la-gkb-indicator-config.lo: gkb-indicator-config.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-indicator-config.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-indicator-config.Tpo" -c -o libgnomekbd_la-gkb-indicator-config.lo `test -f 'gkb-indicator-config.c' || echo '$(srcdir)/'`gkb-indicator-config.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-indicator-config.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-indicator-config.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-indicator-config.Tpo"; exit 1; fi
#	source='gkb-indicator-config.c' object='libgnomekbd_la-gkb-indicator-config.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-indicator-config.lo `test -f 'gkb-indicator-config.c' || echo '$(srcdir)/'`gkb-indicator-config.c

libgnomekbd_la-gkb-util.lo: gkb-util.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-util.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-util.Tpo" -c -o libgnomekbd_la-gkb-util.lo `test -f 'gkb-util.c' || echo '$(srcdir)/'`gkb-util.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-util.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-util.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-util.Tpo"; exit 1; fi
#	source='gkb-util.c' object='libgnomekbd_la-gkb-util.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-util.lo `test -f 'gkb-util.c' || echo '$(srcdir)/'`gkb-util.c

libgnomekbd_la-gkb-indicator.lo: gkb-indicator.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-indicator.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-indicator.Tpo" -c -o libgnomekbd_la-gkb-indicator.lo `test -f 'gkb-indicator.c' || echo '$(srcdir)/'`gkb-indicator.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-indicator.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-indicator.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-indicator.Tpo"; exit 1; fi
#	source='gkb-indicator.c' object='libgnomekbd_la-gkb-indicator.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-indicator.lo `test -f 'gkb-indicator.c' || echo '$(srcdir)/'`gkb-indicator.c

libgnomekbd_la-gkb-indicator-marshal.lo: gkb-indicator-marshal.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-indicator-marshal.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-indicator-marshal.Tpo" -c -o libgnomekbd_la-gkb-indicator-marshal.lo `test -f 'gkb-indicator-marshal.c' || echo '$(srcdir)/'`gkb-indicator-marshal.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-indicator-marshal.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-indicator-marshal.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-indicator-marshal.Tpo"; exit 1; fi
#	source='gkb-indicator-marshal.c' object='libgnomekbd_la-gkb-indicator-marshal.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-indicator-marshal.lo `test -f 'gkb-indicator-marshal.c' || echo '$(srcdir)/'`gkb-indicator-marshal.c

libgnomekbd_la-gkb-indicator-plugin-manager.lo: gkb-indicator-plugin-manager.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-indicator-plugin-manager.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-indicator-plugin-manager.Tpo" -c -o libgnomekbd_la-gkb-indicator-plugin-manager.lo `test -f 'gkb-indicator-plugin-manager.c' || echo '$(srcdir)/'`gkb-indicator-plugin-manager.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-indicator-plugin-manager.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-indicator-plugin-manager.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-indicator-plugin-manager.Tpo"; exit 1; fi
#	source='gkb-indicator-plugin-manager.c' object='libgnomekbd_la-gkb-indicator-plugin-manager.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-indicator-plugin-manager.lo `test -f 'gkb-indicator-plugin-manager.c' || echo '$(srcdir)/'`gkb-indicator-plugin-manager.c

libgnomekbd_la-gkb-config-registry.lo: gkb-config-registry.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-config-registry.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-config-registry.Tpo" -c -o libgnomekbd_la-gkb-config-registry.lo `test -f 'gkb-config-registry.c' || echo '$(srcdir)/'`gkb-config-registry.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-config-registry.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-config-registry.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-config-registry.Tpo"; exit 1; fi
#	source='gkb-config-registry.c' object='libgnomekbd_la-gkb-config-registry.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-config-registry.lo `test -f 'gkb-config-registry.c' || echo '$(srcdir)/'`gkb-config-registry.c

libgnomekbd_la-gkb-keyboard-drawing-marshal.lo: gkb-keyboard-drawing-marshal.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-keyboard-drawing-marshal.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing-marshal.Tpo" -c -o libgnomekbd_la-gkb-keyboard-drawing-marshal.lo `test -f 'gkb-keyboard-drawing-marshal.c' || echo '$(srcdir)/'`gkb-keyboard-drawing-marshal.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing-marshal.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing-marshal.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing-marshal.Tpo"; exit 1; fi
#	source='gkb-keyboard-drawing-marshal.c' object='libgnomekbd_la-gkb-keyboard-drawing-marshal.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-keyboard-drawing-marshal.lo `test -f 'gkb-keyboard-drawing-marshal.c' || echo '$(srcdir)/'`gkb-keyboard-drawing-marshal.c

libgnomekbd_la-gkb-keyboard-drawing.lo: gkb-keyboard-drawing.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -MT libgnomekbd_la-gkb-keyboard-drawing.lo -MD -MP -MF "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing.Tpo" -c -o libgnomekbd_la-gkb-keyboard-drawing.lo `test -f 'gkb-keyboard-drawing.c' || echo '$(srcdir)/'`gkb-keyboard-drawing.c; \
	then mv -f "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing.Tpo" "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing.Plo"; else rm -f "$(DEPDIR)/libgnomekbd_la-gkb-keyboard-drawing.Tpo"; exit 1; fi
#	source='gkb-keyboard-drawing.c' object='libgnomekbd_la-gkb-keyboard-drawing.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgnomekbd_la_CFLAGS) $(CFLAGS) -c -o libgnomekbd_la-gkb-keyboard-drawing.lo `test -f 'gkb-keyboard-drawing.c' || echo '$(srcdir)/'`gkb-keyboard-drawing.c

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
install-gnomekbdincHEADERS: $(gnomekbdinc_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(gnomekbdincdir)" || $(mkdir_p) "$(DESTDIR)$(gnomekbdincdir)"
	@list='$(gnomekbdinc_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(gnomekbdincHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(gnomekbdincdir)/$$f'"; \
	  $(gnomekbdincHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(gnomekbdincdir)/$$f"; \
	done

uninstall-gnomekbdincHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(gnomekbdinc_HEADERS)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(gnomekbdincdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(gnomekbdincdir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(gnomekbdincdir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-libLTLIBRARIES clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-gnomekbdincHEADERS

install-exec-am: install-libLTLIBRARIES

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-gnomekbdincHEADERS uninstall-info-am \
	uninstall-libLTLIBRARIES

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLTLIBRARIES clean-libtool ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-exec \
	install-exec-am install-gnomekbdincHEADERS install-info \
	install-info-am install-libLTLIBRARIES install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-gnomekbdincHEADERS uninstall-info-am \
	uninstall-libLTLIBRARIES


%.desktop:   %.desktop.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@

gkb-indicator-marshal.h: gkb-indicator-marshal.list
	$(GLIB_GENMARSHAL) --prefix=gkb_indicator $(srcdir)/gkb-indicator-marshal.list --header > $@

gkb-indicator-marshal.c: gkb-indicator-marshal.h
	$(GLIB_GENMARSHAL) --prefix=gkb_indicator $(srcdir)/gkb-indicator-marshal.list --body > $@

gkb-config-registry-server.h:  gkb-config-registry.xml
	dbus-binding-tool --prefix=gkb_config_registry --mode=glib-server $< > $@

gkb-config-registry-client.h:  gkb-config-registry.xml
	dbus-binding-tool --prefix=gkb_config_registry --mode=glib-client $< > $@

gkb-keyboard-drawing-marshal.h: gkb-keyboard-drawing-marshal.list
	( $(GLIB_GENMARSHAL) --prefix=gkb_keyboard_drawing $(srcdir)/gkb-keyboard-drawing-marshal.list \
                            --header > gkb-keyboard-drawing-marshal.tmp \
          && mv gkb-keyboard-drawing-marshal.tmp gkb-keyboard-drawing-marshal.h ) \
        || ( rm -f gkb-keyboard-drawing-marshal.tmp && exit 1 )

gkb-keyboard-drawing-marshal.c: gkb-keyboard-drawing-marshal.h
	( $(GLIB_GENMARSHAL) --prefix=gkb_keyboard_drawing $(srcdir)/gkb-keyboard-drawing-marshal.list \
                            --body > gkb-keyboard-drawing-marshal.tmp \
          && mv gkb-keyboard-drawing-marshal.tmp gkb-keyboard-drawing-marshal.c ) \
        || ( rm -f gkb-keyboard-drawing-marshal.tmp && exit 1 )
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
